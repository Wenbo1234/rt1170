/*
 * Copyright 2019 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _AUDIO_H_
#define _AUDIO_H_

#define DEMO_SAI1_CLK_FREQ CLOCK_GetFreq(kCLOCK_AudioPllOut)/DEMO_SAI1_CLOCK_SOURCE_DIVIDER
#define DEMO_SAI3_CLK_FREQ CLOCK_GetFreq(kCLOCK_AudioPllOut)/DEMO_SAI3_CLOCK_SOURCE_DIVIDER
#define DEMO_MQS_CLK_FREQ CLOCK_GetFreq(kCLOCK_AudioPllOut)/DEMO_MQS_CLOCK_SOURCE_DIVIDER
   
#define Codec_SAI  SAI1
#define MQS_SAI    SAI3

#define DEMO_SAI1_CLOCK_SOURCE_DIVIDER 16        //786.48/(postDivider+1)/16=24.5775=24.576   722,534,400/(postDivider+1)/16=22579200
#define DEMO_SAI3_CLOCK_SOURCE_DIVIDER 4 
#define DEMO_MQS_CLOCK_SOURCE_DIVIDER  4

#define MQS_IOMUXC IOMUXC_GPR

/* demo audio sample rate */
#define DEMO_AUDIO_SAMPLE_RATE (kSAI_SampleRate48KHz)
#define EXAMPLE_SAI1_TX_SOURCE kDmaRequestMuxSai1Tx
#define EXAMPLE_SAI3_TX_SOURCE kDmaRequestMuxSai3Tx
/* DMA */
#define EXAMPLE_DMA DMA0
#define CODEC_CHANNEL (0U)
#define MQS_CHANNEL   (1U)

#define BUFFER_SIZE (512)
#define BUFFER_NUM (2U)

/* demo audio master clock */
#define DEMO_CODEC_MASTER_CLOCK DEMO_SAI1_CLK_FREQ
#define DEMO_MQS_MASTER_CLOCK DEMO_SAI3_CLK_FREQ
/* demo audio data channel */
#define DEMO_AUDIO_DATA_CHANNEL (2U)
/* demo audio bitwidth */
#define DEMO_AUDIO_BIT_WIDTH kSAI_WordWidth16bits

#define AUDIO_OFFSET (uint8_t*)0x31400000

typedef enum _audio_select
{
    CODEC_playback = 0x0U,  
    MQS_playback,               
} audio_select_t;

typedef enum _audio_type
{
    kAUDIO_Type_1 = 0x0U,
    kAUDIO_Type_2,        
    kAUDIO_Type_3,                
    kAUDIO_Type_4,                 
    kAUDIO_Type_5,
    kAUDIO_Type_6,        
    kAUDIO_Type_7,                
    kAUDIO_Type_8,                 
    kAUDIO_Type_9,
    kAUDIO_Type_10,        
    kAUDIO_Type_11,                
    kAUDIO_Type_12,                 
    kAUDIO_Type_13,
    kAUDIO_Type_14,                
    kAUDIO_Type_15,
    kAUDIO_Type_16,
    kAUDIO_Type_0  
} audio_type_t;

typedef enum _audio_play_action
{
    kAUDIO_play_start = 0x0U,  
    kAUDIO_play_stop         
} audio_play_action_t;

void Codec_InitHardware(void);
void Codec_InitClock(void);
void Codec_InitSAI(void);
void Codec_DeInitSAI(void);

void MQS_InitHardware(void);
void MQS_InitClock(void);
void MQS_Init(void);
void MQS_DeInit(void);

void Audio_PlayBack(audio_select_t select, audio_type_t type, audio_play_action_t action);

#endif /* _AUDIO_H_ */

/***********************************************************************************************************************
 * EOF
 **********************************************************************************************************************/
